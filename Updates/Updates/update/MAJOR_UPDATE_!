import time
import random
from collections import defaultdict

def delay_print(s):
    for c in s:
        print(c, end='', flush=True)
        time.sleep(0.10)

class Loot:
    def __init__(self, name, loot_type, value):
        self.name = name
        self.loot_type = loot_type
        self.value = value

# Example loot items
rusty_sword = Loot('Rusty Sword', 'weapon', 2)
excalibur = Loot('Excalibur', 'weapon', 1_000_000)
health_potion = Loot('Health Potion', 'potion', 10)

class Player:
    def __init__(self, name):
        self.name = name
        self.maxhealth = 100
        self.health = self.maxhealth
        self.base_attack = 10
        self.gold = 0
        self.potions = 0
        self.weapons = ["Rusty Sword"]
        self.current_weapon = "Rusty Sword"
        self.weapon_bonus = {"Rusty Sword": 15}
        self.current_room = "Dungeon"
        self.inventory = defaultdict(int)
        self.pet = None
        self.defending = False
        self.special_attack_cooldown = 0

    def adopt_pet(self, pet):
        self.pet = pet
        print(f"You've adopted {pet.name} as your pet!")

    def check_pet(self):
        if self.pet:
            print(f"\nYour pet {self.pet.name} is with you.")
            self.interact_with_pet()
        else:
            print("You don't have a pet.")

    def interact_with_pet(self):
        if self.pet:
            print(f"\nInteracting with {self.pet.name}:")
            print("1. Feed")
            print("2. Play")
            print("3. Check status")
            print("4. Return to game")
            
            choice = input("Choose an action (1-4): ")
            if choice == "1":
                self.pet.feed()
            elif choice == "2":
                self.pet.play()
            elif choice == "3":
                self.pet.status()
            elif choice == "4":
                return
            else:
                print("Invalid choice.")
        else:
            print("You don't have a pet yet.")

    def add_gold(self, amount):
        self.gold += amount
        print(f"You gained {amount} gold. Total Gold: {self.gold}")

    def spend_gold(self, amount):
        if self.gold >= amount:
            self.gold -= amount
            return True
        return False

    def take_damage(self, damage):
        self.health -= damage
        
    def heal(self, amount):
        self.health = min(self.maxhealth, self.health + amount)
        
    def attack_npc(self, npc):
        bonus = self.weapon_bonus.get(self.current_weapon, 0)
        total_attack = self.base_attack + bonus
        npc.take_damage(total_attack)

    def add_to_inventory(self, item):
        self.inventory[item] += 1

    def set_health(self, new_health):
        self.health = min(self.maxhealth, new_health)

    def special_attack(self, npc):
        if self.special_attack_cooldown == 0:
            damage = random.randint(self.base_attack * 2, self.base_attack * 3)
            npc.take_damage(damage)
            self.special_attack_cooldown = 3
            return damage
        return 0

    def defend(self):
        self.defending = True

    def use_potion(self):
        if self.potions > 0:
            heal_amount = random.randint(20, 40)
            self.heal(heal_amount)
            self.potions -= 1
            return heal_amount
        return 0

    def update_cooldowns(self):
        if self.special_attack_cooldown > 0:
            self.special_attack_cooldown -= 1

class NPC:
    def __init__(self, name, health, attack):
        self.name = name
        self.health = health
        self.attack = attack
        
    def take_damage(self, damage):
        self.health -= damage

class Merchant:
    def __init__(self):
        self.inventory = {
            "Health Potion": {"price": 20, "description": "Restores 50 HP"},
            "Strength Potion": {"price": 30, "description": "Increases attack by 10 for the next battle"},
            "Better Sword": {"price": 100, "description": "Increases base attack by 5 permanently"}
        }

    def display_inventory(self):
        print("Merchant's Inventory:")
        for i, (item, details) in enumerate(self.inventory.items(), 1):
            print(f"{i}. {item}: {details['price']} gold - {details['description']}")

    def sell_item(self, player, item_number):
        if 1 <= item_number <= len(self.inventory):
            item = list(self.inventory.keys())[item_number - 1]
            price = self.inventory[item]["price"]
            if player.spend_gold(price):
                if item == "Health Potion":
                    player.potions += 1
                elif item == "Strength Potion":
                    player.add_to_inventory("Strength Potion")
                elif item == "Better Sword":
                    player.base_attack += 5
                print(f"You bought {item} for {price} gold.")
                return True
            else:
                print("Not enough gold!")
        else:
            print("Invalid item number.")
        return False

class Pet:
    def __init__(self, name, species):
        self.name = name
        self.species = species
        self.loyalty = 0
        self.hunger = 50
        self.happiness = 50

    def feed(self):
        self.hunger = max(0, self.hunger - 30)
        self.happiness += 10
        self.loyalty += 5
        print(f"{self.name} happily eats the food. Hunger decreased, happiness increased!")

    def play(self):
        self.happiness += 20
        self.hunger += 10
        self.loyalty += 10
        print(f"You play with {self.name}. Happiness increased!")

    def status(self):
        print(f"{self.name} Status:")
        print(f"Hunger: {self.hunger}/100")
        print(f"Happiness: {self.happiness}/100")
        print(f"Loyalty: {self.loyalty}/100")

def enhanced_combat(player, npc):
    print(f"A {npc.name} appears!")
    
    while npc.health > 0 and player.health > 0:
        print(f"\n{player.name} Health: {player.health}")
        print(f"{npc.name} Health: {npc.health}")
        
        print("\nChoose your action:")
        print("1. Attack")
        print("2. Defend")
        print("3. Use Potion")
        print("4. Special Attack")
        print("5. Analyze Enemy")
        print("6. Run")
        
        choice = input("Enter your choice (1-6): ")
        
        if choice == "1":  # Attack
            damage = random.randint(player.base_attack, player.base_attack + 10)
            npc.health -= damage
            print(f"You deal {damage} damage to the {npc.name}!")
        elif choice == "2":  # Defend
            player.defending = True
            print("You take a defensive stance, reducing incoming damage!")
        elif choice == "3":  # Use Potion
            if player.potions > 0:
                heal_amount = random.randint(20, 40)
                player.heal(heal_amount)
                player.potions -= 1
                print(f"You use a potion and heal for {heal_amount} HP!")
            else:
                print("You don't have any potions!")
                continue
        elif choice == "4":  # Special Attack
            if player.special_attack_cooldown == 0:
                damage = random.randint(player.base_attack * 2, player.base_attack * 3)
                npc.health -= damage
                player.special_attack_cooldown = 3
                print(f"You unleash a powerful attack, dealing {damage} damage!")
            else:
                print("Special attack is on cooldown!")
                continue
        elif choice == "5":  # Analyze Enemy
            print(f"You analyze the {npc.name}:")
            print(f"Health: {npc.health}")
            print(f"Attack: {npc.attack}")
            continue
        elif choice == "6":  # Run
            if random.random() < 0.5:
                print("You successfully flee from the battle!")
                return "fled"
            else:
                print("You failed to escape!")
        else:
            print("Invalid choice. Try again.")
            continue
        
        # NPC's turn
        if npc.health > 0:
            npc_damage = random.randint(npc.attack - 5, npc.attack + 5)
            if player.defending:
                npc_damage //= 2
                player.defending = False
            player.health -= npc_damage
            print(f"The {npc.name} attacks you for {npc_damage} damage!")
        
        # Reduce special attack cooldown
        if player.special_attack_cooldown > 0:
            player.special_attack_cooldown -= 1
    
    if player.health <= 0:
        print(f"You were defeated by the {npc.name}. Game Over.")
        return "defeat"
    else:
        print(f"You defeated the {npc.name}!")
        return "victory"

def display_player_info(player):
    print(f"{player.name} is in the {player.current_room}\nInventory: {dict(player.inventory)}\nPlayer Health: {player.health}HP\nGOLD: {player.gold}\n{'-' * 27}")

def main_game_loop(player):
    display_player_info(player)
    print("\nWhat would you like to do?")
    print("1. Continue with the current room")
    print("2. Check inventory")
    print("3. Interact with pet")
    print("4. Visit the merchant")
    print("5. Rest and heal")
    print("6. Quit game")
    
    choice = input("Enter your choice (1-6): ")
    
    if choice == "1":
        return "continue"
    elif choice == "2":
        print("\nYour inventory:")
        for item, quantity in player.inventory.items():
            print(f"{item}: {quantity}")
        input("Press Enter to continue...")
    elif choice == "3":
        player.check_pet()
    elif choice == "4":
        return "merchant_room"
    elif choice == "5":
        rest_and_heal(player)
    elif choice == "6":
        return "quit"
    else:
        print("Invalid choice. Please try again.")
    
    return "loop"

def room_wrapper(room_function, player):
    while True:
        action = main_game_loop(player)
        if action == "continue":
            result = room_function(player)
            if result:
                return result
        elif action == "quit":
            return "quit"
        elif action == "merchant_room":
            merchant_room(player)
        elif action == "loop":
            continue

def dungeon(player):
    player.current_room = "Dungeon"
    print("You woke up in a Dungeon, feeling dizzy, looking around you notice a Copper coin on the floor.....")
    print("Do you want to pick it up?")
    print("Yes/No")
    
    pickup = input().lower()
    if pickup == "yes":
        player.add_to_inventory("copper coin")
        print(f"Inventory: {dict(player.inventory)}")
        print("You pick up the copper coin and walk into a dark Hallway")
        return "goblin_room"
    elif pickup == "no":
        print("So you leave the room and walk down the hallway")
        return "goblin_room"
    else:
        print("Invalid Input.. Please try again")
        return None

def goblin_room(player):
    player.current_room = "Dark Hallway"
    print("You walk down the hallway and see a Goblin. He asks you for a copper coin to continue. Give it to him? (yes/no)")
    look = input().lower()
    if look == "yes":
        if player.inventory["copper coin"] > 0:
            player.inventory["copper coin"] -= 1
            print(f"You gave Jeriko your copper coin.\nNow you have {dict(player.inventory)} in your bag")
            print("Jeriko being so happy that you gave him copper coins, he snapped his fingers & teleported away")
            return "hallway_room"
        else:
            print("*"*5)
            print("***You don't have a copper coin to give.***")
            print("*"*5)
    elif look == "no":
        textdisplay3 = "The Goblin named Jeriko lets you pass with a stern warning about the dangers ahead."
        delay_print(textdisplay3)
        print(f"{player.name} walks passed Jeriko.\n[wooooosh] {player.name} falls into a trap door in the floor")
        return "kitchen_room"
    else:
        print("Invalid input. Please enter 'yes' or 'no'.")
    return None

def hallway_room(player):
    player.current_room = "Darkness of a Hallway"
    print("You start walking down a dimly lit hallway,\nwith only the flickering light from a single torch casting eerie shadows on the moss covered cobblestone walls\nThe air is damp and carries a faint, musty rotten onion odor.")
    print("As you take a cautious step forward\nthe floorboards creak under your weight\nechoing through the darkness silence\nThe hallway stretches ahead\ndisappearing into darkness\nYou can barely make out the outline shadow of something very Colossal running up towards you")
    print("Will you choose to run or stay to fight")
    print("*"*10)
    print("fight or run: ")
    
    direction = input().lower()
    if direction == "run":
        return "sewer_room"
    elif direction == "fight":
        return "fight_room"
    else:
        print("Invalid Input! Please choose again")
    return None

def kitchen_room(player):
    player.current_room = "Kitchen looking area"
    print("You walk into an area that looks like a dilapidated kitchen.")
    print("Looking around, you see:")
    print("1. BIG Roaches flying around a dim light bulb that's slowly swinging back and forth")
    print("2. Tiny mice eating old mouldy bread on a rusty countertop")
    print("3. A suspicious-looking cabinet in the corner")
    print("4. A door leading out of the kitchen")

    while True:
        choice = input("What would you like to do? (1-4): ")

        if choice == "1":
            print("You approach the flying roaches. They seem to be guarding something shiny behind the light bulb.")
            roach_choice = input("Do you want to try and grab the shiny object? (yes/no): ").lower()
            if roach_choice == "yes":
                if random.random() < 0.5:
                    print("You successfully snatch the shiny object! It's a small golden key.")
                    player.add_to_inventory("golden key")
                else:
                    print("The roaches swarm you! You take 5 damage from their bites.")
                    player.take_damage(5)
            else:
                print("You decide not to risk it and back away from the roaches.")

        elif choice == "2":
            print("You approach the mice and the mouldy bread.")
            bread_choice = input("Do you want to take the mouldy bread? (yes/no): ").lower()
            if bread_choice == "yes":
                player.add_to_inventory("mouldy bread")
                print("You picked up the Mouldy Bread and put it in your pocket. The mice squeak angrily at you.")
            else:
                print("You leave the bread for the mice. They seem grateful and scurry away, revealing a small potion behind them!")
                player.potions += 1
                print("You gained 1 Health Potion!")

        elif choice == "3":
            print("You cautiously approach the suspicious cabinet.")
            cabinet_choice = input("Do you want to open it? (yes/no): ").lower()
            if cabinet_choice == "yes":
                if "golden key" in player.inventory:
                    print("You use the golden key to unlock the cabinet. Inside, you find a mysterious amulet!")
                    player.add_to_inventory("mysterious amulet")
                else:
                    print("The cabinet is locked. You need a key to open it.")
            else:
                print("You decide not to open the cabinet. Who knows what might be inside?")

        elif choice == "4":
            print("You decide to leave the kitchen.")
            print("As you exit, you notice two paths:")
            print("To the left is a long path of darkness.")
            print("To the right, you see a dim light shining from a short distance.")
            direction = input("Do you choose to go Left or Right? ").lower()
            if direction == "right":
                return "sewer_room"
            elif direction == "left":
                return "sewer_room"
            else:
                print("Invalid Input! Please choose again")

        else:
            print("Invalid Input! Please choose a number between 1 and 4.")

        # Check player's health after each action
        if player.health <= 0:
            return "game_over"

        # Ask if the player wants to perform another action
        another_action = input("Do you want to do something else in the kitchen? (yes/no): ").lower()
        if another_action != "yes":
            print("You decide to leave the kitchen.")
            print("As you exit, you notice two paths:")
            print("To the left is a long path of darkness.")
            print("To the right, you see a dim light shining from a short distance.")
            direction = input("Do you choose to go Left or Right? ").lower()
            if direction == "right":
                return "sewer_room"
            elif direction == "left":
                return "sewer_room"
            else:
                print("Invalid Input! Please choose again")

    return None

def sewer_room(player):
    player.current_room = "sewer room"
    print("You travel in a Stink Sewer like area that is putrid with horrific odors,\nYou can go left or right")
    direction = input().lower()
    if direction in ["right", "left"]:
        print("*"*10)
        return "na_moo_riddle"
    else:
        print("Invalid Input! Please choose again!")
    return None

def fight_room(player):
    player.current_room = "fight room"
    
    print("You find yourself face-to-face with a Giant Crab.")
    npc = NPC("Giant Crab", 50, 15)
    
    result = enhanced_combat(player, npc)
    
    if result == "victory":
        gold_reward = random.randint(10, 50)
        player.add_gold(gold_reward)
        player.potions += 1
        print(f"You defeated the {npc.name} and found {gold_reward} gold and +1 Potion!")
        return "kitchen_room"
    elif result == "defeat":
        return "game_over"
    else:  # fled
        return "sewer_room"

def mystery_forest(player):
    player.current_room = "Mystery Forest"
    print("As you step into an unknown Mythical Gigantic forest, the air thickens with an ancient magic, and the trees whisper secrets of forgotten times. Glowing fungi illuminate the path, casting eerie shadows that dance with the passing of on and off sunlight. Suddenly, a soft, melodic hum fills the air, hinting at the presence of an unseen Dwarf Troll watching over the enchanted realm.")
    print("Who are you!? Where did you come from!? HOW DID YOU EVEN FIND THIS PLACE!? Sorry for the many rude questions")
    print(f"{player.name} stares at A mini dwarf troll, no bigger than 2 feet, wielding a small wooden stick crafted from the ancient Tree of Life's root. He sports a long, flowing beard covered with pillbugs and earthworms, a whimsical mushroom hat that looks dried up and older than Thornbark himself, and carries a mysterious hide backpack adorned with mythical forest trinkets. His presence gives an aura of ancient magic and woodland mythical forest mystery.")
    print("My name is THRONBARK of the Lahbahn Race that resides in this Ancient Forest of Eldergrove")
    
    print("Do you want to:")
    print("1. Offer something to Thornbark")
    print("2. Venture deeper into the forest")
    print("3. Leave the forest")
    
    choice = input("Enter your choice (1-3): ")
    
    if choice == "1":
        print("Do you have anything to offer Thornbark? yes/no")
        look = input().lower()
        if look == "yes":
            if player.inventory["mouldy bread"] > 0:
                player.inventory["mouldy bread"] -= 1
                print(f"You dig into your bag and find {dict(player.inventory)}. You hand over to Thornbark your Mouldy Bread.\nNow you have {dict(player.inventory)} in your bag")
                print("Thornbark stares at you with amazement, being very pleased and happy hands you a very odd and ancient flute, intricately carved from the wood of the Tree of Life. The flute is adorned with delicate, glowing runes that pulse with a soft, ethereal light. Its surface is smooth, yet it carries the weight of countless ages, aura of the very soul of the forest lightly pulsates off of it.")
                print("This very flute will bring you many many mysterious ventures to come if you learn to master its melody! Please do not ever give this away for it holds the power of untold Universal Power")
                player.add_to_inventory("Elder's Whispers Flute")
                return "pet_encounter_room"
            else:
                print("*"*5)
                print("***You don't have a mouldy bread to give.***")
                print("*"*5)
        elif look == "no":
            textdisplay3 = "Thornbark sighs.. He pulls out of his mysterious hide back pack a very odd and ancient flute, intricately carved from the wood of the Tree of Life. The flute is adorned with delicate, glowing runes that pulse with a soft, ethereal light. Its surface is smooth, yet it carries the weight of countless ages, aura of the very soul of the forest lightly pulsates off of it."
            delay_print(textdisplay3)
            print(f"Thornbark then plays a very soothing melody from it as {player.name} slowly feels weird and nauseous\n{player.name} blacks out")
            return "pet_encounter_room"
        else:
            print("Invalid input. Please enter 'yes' or 'no'.")
    elif choice == "2":
        print("You decide to explore deeper into the mysterious forest...")
        return "deep_mystery_forest"
    elif choice == "3":
        print("You decide to leave the forest.")
        return "dungeon"  # or wherever you want the player to go when leaving the forest
    else:
        print("Invalid choice. Please try again.")
    
    return None

def deep_mystery_forest(player):
    player.current_room = "Deep Mystery Forest"
    print("You venture deeper into the Mystery Forest. The trees grow taller and closer together, their ancient branches intertwining overhead.")
    print("Suddenly, you come across a clearing bathed in ethereal light. In the center stands a figure that seems to be part tree, part humanoid.")
    print("'Greetings, traveler. I am Thornroot, guardian of the deepest parts of ElderGrove,' the figure speaks, its voice like rustling leaves.")
    
    print("\nThornroot regards you with ancient, wise eyes.")
    print("'To prove your worth and learn the secrets of this forest, you must face a trial. Are you prepared to face the Centerpede?'")
    
    choice = input("Do you accept the challenge? (yes/no): ").lower()
    
    if choice != "yes":
        print("Thornroot nods solemnly. 'Return when you are ready to face your trial.'")
        return "mystery_forest"
    
    print("\nThornroot waves his branch-like arm, and the ground begins to tremble.")
    print("From the earth emerges a massive centipede, its countless legs clicking against stone and root.")
    
    centerpede = NPC("Centerpede", 100, 20)
    battle_result = enhanced_combat(player, centerpede)
    
    if battle_result == "victory":
        print("\nAs the Centerpede falls, its body dissolves into motes of light that float away on the forest breeze.")
        print("Thornroot approaches you, approval glinting in his eyes.")
        print("'Well fought, brave one. You have proven yourself worthy of the forest's greatest secret.'")
        
        if "Elder's Whispers Flute" in player.inventory:
            print("\nThornroot gestures to the Elder's Whispers Flute in your possession.")
            print("'Ah, I see you already possess the key. Let me teach you how to use it properly.'")
            print("Thornroot spends some time instructing you on the intricate melodies and rhythms needed to unlock the flute's true power.")
            print("\n'The flute you hold is more than just an instrument. It is a key to the past, a relic of the long-departed Terrans.'")
            print("'When played correctly, it can summon their ancient mothership, hidden here in ElderGrove for millennia.'")
            print("'Would you like to summon the mothership now?'")
            
            summon_choice = input("Summon the mothership? (yes/no): ").lower()
            if summon_choice == "yes":
                print("\nYou bring the flute to your lips and play the melody Thornroot taught you.")
                print("The forest around you seems to hold its breath. Then, with a great rush of wind, the canopy above parts...")
                print("A massive, shimmering vessel descends from the sky, hovering silently above the clearing.")
                print("A beam of light engulfs you, and you feel yourself being drawn upward...")
                return "mothership"
            else:
                print("\nYou decide not to summon the mothership yet. Thornroot nods in understanding.")
                print("'The choice is yours to make when you are ready. The forest will be waiting.'")
        else:
            print("\nThornroot looks at you curiously. 'It seems you are missing a crucial item for the next part of your journey.'")
            print("'Seek out the Elder's Whispers Flute. Only then can you unlock the full potential of this forest's secrets.'")
        
        return "mystery_forest"
    elif battle_result == "defeat":
        print("\nAs your consciousness fades, you see Thornroot shaking his head sadly.")
        print("'Rest now, young one. The forest will heal you, and you may try again when you are stronger.'")
        player.set_health(player.maxhealth // 2)  # Restore half health
        return "mystery_forest"
    else:  # fled
        print("\nYou retreat from the battle. Thornroot watches you with a mixture of disappointment and understanding.")
        print("'Sometimes, wisdom lies in knowing when to step back. Return when you are ready to face the challenge.'")
        return "mystery_forest"

def mothership(player):
    player.current_room = "Ancient Terran Mothership"
    print("\nYou find yourself standing in a vast, dimly lit chamber. The air hums with dormant energy.")
    print("Rows of strange, sleek devices line the walls, their surfaces covered in a fine layer of dust.")
    print("This is clearly the interior of the ancient Terran mothership, untouched for countless years.")
    print("\nWhat would you like to do?")
    print("1. Explore the ship's systems")
    print("2. Search for artifacts")
    print("3. Try to activate the ship")
    print("4. Return to the forest")
    
    choice = input("Enter your choice (1-4): ")
    
    if choice == "1":
        print("\nYou approach what appears to be a control panel. As your hand hovers over it, lights flicker to life.")
        print("A holographic display appears, showing star charts and diagrams you can't begin to comprehend.")
        # Add more story or gameplay elements here
    elif choice == "2":
        print("\nYou begin searching the ship for any useful artifacts.")
        # Add a chance to find unique items here
    elif choice == "3":
        print("\nYou try to activate the ship's main systems. A low rumble echoes through the chamber...")
        # Add consequences for trying to activate the ship
    elif choice == "4":
        print("\nYou decide to return to the forest. As you wonder how to leave, a beam of light engulfs you...")
        return "deep_mystery_forest"
    else:
        print("Invalid choice. Please try again.")
    
    return "mothership"

def pet_encounter_room(player):
    player.current_room = "Mysterious Garden"
    pet = Pet("Luna", "Mystical Fox")
    
    print("\nYou enter a beautiful, mystical garden.")
    print(f"A {pet.species} approaches you cautiously.")
    
    while True:
        print(f"\nThe {pet.species} looks at you curiously.")
        print("What would you like to do?")
        print("1. Try to feed the creature")
        print("2. Attempt to play with it")
        print("3. Observe its status")
        print("4. Try to adopt it")
        print("5. Leave the garden")
        
        choice = input("Enter your choice (1-5): ")
        
        if choice == "1":
            pet.feed()
        elif choice == "2":
            pet.play()
        elif choice == "3":
            pet.status()
        elif choice == "4":
            if pet.loyalty >= 50:
                player.adopt_pet(pet)
                print(f"{pet.name} has decided to join you on your adventure!")
                return "void_room"
            else:
                print(f"The {pet.species} doesn't seem to trust you enough yet.")
        elif choice == "5":
            print("You decide to leave the garden.")
            return "void_room"
        else:
            print("Invalid choice. Please try again.")
        
        if pet.loyalty >= 75 and player.pet is None:
            print(f"\nThe {pet.species} has grown very fond of you!")
            player.adopt_pet(pet)
            print(f"{pet.name} has decided to join you on your adventure!")
            return "void_room"
    return None

def na_moo_riddle(player):
    player.current_room = "moo room"
    secret_number = random.randint(1, 10)
    attempts = 0
    loser = 3
    print("You descended into the murky depths of the sewer, the air thick with decay. Walls dripped slime,\nand flickering torches barely illuminated winding tunnels.\nYou see doo-doo and vomit looking material floating in a slow pace current into the abyss.")
    print("As you go to step away from the foul-smelling water,\na giant rat the size of a house cat runs past you!\nYou accidentally fall into the septic sewer water")
    print("You quickly jump out of the water disgusted and start puking, but suddenly stop\nOut of the murky depths of the fetid swamp of sewer water,\nan ancient toad the size of a boulder squats,\nits warty skin oozing with a putrid slime. Its bulging eyes, yellowed and grimy,\nfixate on you as it croaks in a guttural voice,")
    print("Aloha e ka hoa!\n'O ko'u inoa 'o NA MO'O.\nHe aha kāu hana ma kēia kai i lalo nei i nā wai kūkulu kūkulu?")
    print("Pono 'oe e koho i nā helu ma waena o ho'okahi a me 'umi:")
    print("Do you understand this Creature: Ae/Aole\n")
    
    understand = input().lower()
    if understand == "ae":
        pass
    elif understand == "aole":
        print("Heluhelu hou")
        return "na_moo_riddle"
    else:
        print("NA MO'O doesn't understand you, say it again")
        return "na_moo_riddle"
    while True:
        guess = input("E komo i kāu pane: ")
        try:
            guess = int(guess)
        except ValueError:
            print("NA MO'O doesn't understand you, say it again.")
            continue
        attempts += 1
        if guess < secret_number:
            print("E hele i luna.")
        elif guess > secret_number:
            print("E hele i lalo.")
        else:
            print(f"Aloha! Ua mahalo au i kou hoomaopopo ana i ka kakou olelo kahiko.")
            print(f"E 'ae mai ko mākou hui malu iā 'oe a e hele i laila i kēlā me kēia manawa āu e makemake\nai iā mākou e ho'ohana wale i kēia pūpū e puhi ai e kāhea iā mākou.\n{{OB TITLE}}{{OB ARTIFACT}}")
            print("Na Mo'o teleports you into the abyssal void")
            return "void_room"
        if attempts >= loser:
            print("'A'ole maopopo iā 'oe ke 'ano a me ka 'ōlelo o ko kākou mo'omeheu kahiko!")
            print("MAI OLA!")
            print("Na Moo teleports you into mystery forest")
            return "mystery_forest"
        return None

def void_room(player):
    player.current_room = "void room"
    print("You find yourself in an endless, pitch-black void. The silence is deafening, and you can't tell which way is up or down.")
    print("What do you want to do?")
    print("1. Try to use the Elder's Whispers Flute")
    print("2. Call for your pet")
    print("3. Close your eyes and concentrate")
    
    choice = input("Enter your choice (1-3): ")
    
    if choice == "1":
        if "Elder's Whispers Flute" in player.inventory:
            print("You play the Elder's Whispers Flute. Its ethereal melody echoes through the void, creating ripples of light.")
            print("A portal opens before you, leading back to the dungeon.")
            return "dungeon"
        else:
            print("You don't have the Elder's Whispers Flute.")
    elif choice == "2":
        if player.pet:
            print(f"You call for {player.pet.name}. Your loyal companion appears beside you, glowing softly in the darkness.")
            print(f"{player.pet.name} leads you through the void, and you find yourself back in the dungeon.")
            return "dungeon"
        else:
            print("You don't have a pet to call.")
    elif choice == "3":
        print("You close your eyes and concentrate. After a moment, you feel a sudden shift...")
        return "dungeon"
    else:
        print("Invalid choice. The void consumes you.")
        return "game_over"
    return None

def merchant_room(player):
    player.current_room = "Merchant's Shop"
    merchant = Merchant()
    while True:
        display_player_info(player)
        print("\nYou enter a dimly lit shop. A mysterious merchant greets you.")
        print(f"Your gold: {player.gold}")
        merchant.display_inventory()
        
        print("\nWhat would you like to do?")
        print("1. Buy an item")
        print("2. Leave the shop")
        
        choice = input("Enter your choice (1-2): ")
        
        if choice == "1":
            item_number = input("Enter the number of the item you want to buy: ")
            try:
                item_number = int(item_number)
                merchant.sell_item(player, item_number)
            except ValueError:
                print("Invalid input. Please enter a number.")
        elif choice == "2":
            print("You leave the merchant's shop.")
            return None
        else:
            print("Invalid choice. Try again.")

def rest_and_heal(player):
    heal_amount = random.randint(20, 40)
    player.heal(heal_amount)
    print(f"You rest and recover {heal_amount} HP.")

def game_over(player):
    display_player_info(player)
    print("*"*25)
    print("***GAME OVER!!!***")
    print("*"*25)
    while True:
        print("Do you want to start over on your adventure?")
        direction = input().lower()
        if direction == "yes":
            return "menu_room"
        elif direction == "no":
            print("Thanks for playing!")
            return "quit"
        else:
            print("Invalid input. Please enter 'yes' or 'no'.")

def menu_room(player):
    player.current_room = "menu room"
    while True: 
        display_player_info(player)
        print("**Entering District 1**")
        print("*****@@ Zone 1 @@******")
        print("**Imagination Realm***")
        print("*"*15)
        print("*"*15)
        print("Choose by entering the menu number")
        print("................................ ")
        print("(1)  Start Game: ")
        print(" ...............................")
        print("(2)  Quit: ")
        print("..........................")
        print("Enter Number: ")
        direction = input()
        if direction == "1":
            return "dungeon"
        elif direction == "2":
            return "quit"
        else:
            print("Invalid Input! Please choose again!")

def main():
    print("Welcome to the Adventure Game!")
    player_name = input("Enter your character's name: ")
    player = Player(player_name)
    print(f"Welcome, {player.name}! Your adventure begins...")
    
    current_room = "menu_room"
    while current_room != "quit":
        if current_room == "menu_room":
            current_room = room_wrapper(menu_room, player)
        elif current_room == "dungeon":
            current_room = room_wrapper(dungeon, player)
        elif current_room == "goblin_room":
            current_room = room_wrapper(goblin_room, player)
        elif current_room == "hallway_room":
            current_room = room_wrapper(hallway_room, player)
        elif current_room == "kitchen_room":
            current_room = room_wrapper(kitchen_room, player)
        elif current_room == "sewer_room":
            current_room = room_wrapper(sewer_room, player)
        elif current_room == "fight_room":
            current_room = room_wrapper(fight_room, player)
        elif current_room == "merchant_room":
            current_room = room_wrapper(merchant_room, player)
        elif current_room == "mystery_forest":
            current_room = room_wrapper(mystery_forest, player)
        elif current_room == "deep_mystery_forest":
            current_room = room_wrapper(deep_mystery_forest, player)
        elif current_room == "pet_encounter_room":
            current_room = room_wrapper(pet_encounter_room, player)
        elif current_room == "na_moo_riddle":
            current_room = room_wrapper(na_moo_riddle, player)
        elif current_room == "void_room":
            current_room = room_wrapper(void_room, player)
        elif current_room == "mothership":
            current_room = room_wrapper(mothership, player)
        elif current_room == "game_over":
            current_room = room_wrapper(game_over, player)
        else:
            print("Error: Invalid room")
            break

    print("Thanks for playing!")

if __name__ == "__main__":
    main()
