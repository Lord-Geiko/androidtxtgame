#Copyright 2024##########
#Dangerous Industries 808
#########################
#DO NOT GIVE AWAY CODES##
#########################
#All code is protected###
######### BY LAW ########

import time
import random
import webbrowser
from collections import defaultdict

def delay_print(s):
    for c in s:
        print(c, end='', flush=True)
        time.sleep(0.10)

class Loot:
    def __init__(self, name, loot_type, value):
        self.name = name
        self.loot_type = loot_type
        self.value = value

# Example loot items
rusty_sword = Loot('Rusty Sword', 'weapon', 2)
excalibur = Loot('Excalibur', 'weapon', 1_000_000)
health_potion = Loot('Health Potion', 'potion', 10)

class Player:
    def __init__(self, name):
        self.name = name
        self.maxhealth = 100
        self.health = self.maxhealth
        self.base_attack = 10
        self.gold = 0
        self.potions = 0
        self.weapons = ["Rusty Sword"]
        self.current_weapon = "Rusty Sword"
        self.weapon_bonus = {"Rusty Sword": 15} 
        self.current_room = "Dungeon"
        self.inventory = defaultdict(int)
        self.pet = none #added this for pets
        
        # New attributes for enhanced combat
        self.defending = False
        self.special_attack_cooldown = 0
    #for pet
    def adopt_pet(self, pet):
        self.pet = pet
        print(f"You've adopted {pet.name} as your pet!")
    #pet
    def check_pet(self):
        if self.pet:
            print(f"\nYour pet {self.pet.name} is with you.")
            self.interact_with_pet()
        else:
            print("You don't have a pet.")

    #for pet
    def interact_with_pet(self):
        if self.pet:
            print(f"\nInteracting with {self.pet.name}:")
            print("1. Feed")
            print("2. Play")
            print("3. Check status")
            print("4. Return to game")
            
            choice = input("Choose an action (1-4): ")
            if choice == "1":
                self.pet.feed()
            elif choice == "2":
                self.pet.play()
            elif choice == "3":
                self.pet.status()
            elif choice == "4":
                return
            else:
                print("Invalid choice.")
        else:
            print("You don't have a pet yet.")

    #new method
    def add_gold(self, amount):
        self.gold += amount
        print(f"You gained {amount} gold. Total Gold: {self.gold}")
    
    #new method
    def spend_gold(self, amount):
        if self.gold >= amount:
            self.gold -= amount
            return True
        return False

    def sell_item(self, item):
        if item in self.inventory:
            self.gold += item.value
            del self.inventory[item]
            print(f"You sold {item.name} for {item.value} gold coins.")
        else:
            print("You don't have that item in your inventory.")
    
    def take_damage(self, damage):
        self.health -= damage
        
    def heal(self, amount):
        self.health = min(self.maxhealth, self.health + amount)
        
    def attack_npc(self, npc):
        bonus = self.weapon_bonus.get(self.current_weapon, 0)
        total_attack = self.base_attack + bonus
        npc.take_damage(total_attack)

    def display_gold(self):
        print(f"GOLD: {self.gold}")
    
    def add_to_inventory(self, item):
        self.inventory[item] += 1
    
    def set_health(self, new_health):
        self.health = min(self.maxhealth, new_health)

    # New method for special attack
    def special_attack(self, npc):
        if self.special_attack_cooldown == 0:
            damage = random.randint(self.base_attack * 2, self.base_attack * 3)
            npc.take_damage(damage)
            self.special_attack_cooldown = 3
            return damage
        return 0

    # New method to handle defense
    def defend(self):
        self.defending = True

    # New method to use a potion
    def use_potion(self):
        if self.potions > 0:
            heal_amount = random.randint(20, 40)
            self.heal(heal_amount)
            self.potions -= 1
            return heal_amount
        return 0

    # New method to update cooldowns
    def update_cooldowns(self):
        if self.special_attack_cooldown > 0:
            self.special_attack_cooldown -= 1

class NPC:
    def __init__(self, name, health, attack):
        self.name = name
        self.health = health
        self.attack = attack
        
    def take_damage(self, damage):
        self.health -= damage
#added merchant
class Merchant:
    def __init__(self):
        self.inventory = {
            "Health Potion": {"price": 20, "description": "Restores 50 HP"},
            "Strength Potion": {"price": 30, "description": "Increases attack by 10 for the next battle"},
            "Better Sword": {"price": 100, "description": "Increases base attack by 5 permanently"}
        }

    def display_inventory(self):
        print("Merchant's Inventory:")
        for item, details in self.inventory.items():
            print(f"{item}: {details['price']} gold - {details['description']}")

    def sell_item(self, player, item):
        if item in self.inventory:
            price = self.inventory[item]["price"]
            if player.spend_gold(price):
                if item == "Health Potion":
                    player.potions += 1
                elif item == "Strength Potion":
                    player.add_to_inventory("Strength Potion")
                elif item == "Better Sword":
                    player.base_attack += 5
                print(f"You bought {item} for {price} gold.")
                return True
            else:
                print("Not enough gold!")
        else:
            print("Item not available.")
        return False
#added pet
class Pet:
    def __init__(self, name, species):
        self.name = name
        self.species = species
        self.loyalty = 0
        self.hunger = 50
        self.happiness = 50

    def feed(self):
        self.hunger = max(0, self.hunger - 30)
        self.happiness += 10
        self.loyalty += 5
        print(f"{self.name} happily eats the food. Hunger decreased, happiness increased!")

    def play(self):
        self.happiness += 20
        self.hunger += 10
        self.loyalty += 10
        print(f"You play with {self.name}. Happiness increased!")

    def status(self):
        print(f"{self.name} Status:")
        print(f"Hunger: {self.hunger}/100")
        print(f"Happiness: {self.happiness}/100")
        print(f"Loyalty: {self.loyalty}/100")

#added this enhanced_combat
def enhanced_combat(player, npc):
    print(f"A {npc.name} appears!")
    
    while npc.health > 0 and player.health > 0:
        print(f"\n{player.name} Health: {player.health}")
        print(f"{npc.name} Health: {npc.health}")
        
        print("\nChoose your action:")
        print("1. Attack")
        print("2. Defend")
        print("3. Use Potion")
        print("4. Special Attack")
        print("5. Analyze Enemy")
        print("6. Run")
        
        choice = input("Enter your choice (1-6): ")
        
        if choice == "1":  # Attack
            damage = random.randint(player.base_attack, player.base_attack + 10)
            npc.health -= damage
            print(f"You deal {damage} damage to the {npc.name}!")
        
        elif choice == "2":  # Defend
            player.defending = True
            print("You take a defensive stance, reducing incoming damage!")
        
        elif choice == "3":  # Use Potion
            if player.potions > 0:
                heal_amount = random.randint(20, 40)
                player.heal(heal_amount)
                player.potions -= 1
                print(f"You use a potion and heal for {heal_amount} HP!")
            else:
                print("You don't have any potions!")
                continue
        
        elif choice == "4":  # Special Attack
            if player.special_attack_cooldown == 0:
                damage = random.randint(player.base_attack * 2, player.base_attack * 3)
                npc.health -= damage
                player.special_attack_cooldown = 3
                print(f"You unleash a powerful attack, dealing {damage} damage!")
            else:
                print("Special attack is on cooldown!")
                continue
        
        elif choice == "5":  # Analyze Enemy
            print(f"You analyze the {npc.name}:")
            print(f"Health: {npc.health}")
            print(f"Attack: {npc.attack}")
            continue
        
        elif choice == "6":  # Run
            if random.random() < 0.5:
                print("You successfully flee from the battle!")
                return "fled"
            else:
                print("You failed to escape!")
        
        else:
            print("Invalid choice. Try again.")
            continue
        
        # NPC's turn
        if npc.health > 0:
            npc_damage = random.randint(npc.attack - 5, npc.attack + 5)
            if player.defending:
                npc_damage //= 2
                player.defending = False
            player.health -= npc_damage
            print(f"The {npc.name} attacks you for {npc_damage} damage!")
        
        # Reduce special attack cooldown
        if player.special_attack_cooldown > 0:
            player.special_attack_cooldown -= 1
    
    if player.health <= 0:
        print(f"You were defeated by the {npc.name}. Game Over.")
        return "defeat"
    else:
        print(f"You defeated the {npc.name}!")
        return "victory"

def display_player_info(player):
    print(f"{player.name} is in the {player.current_room}\nInventory: {dict(player.inventory)}\nPlayer Health: {player.health}HP\nGOLD: {player.gold}\n{'-' * 27}")

def dungeon(player):
    player.current_room = "Dungeon"
    while True:
        display_player_info(player)
        print("You woke up in a Dungeon, feeling dizzy, looking around you notice a Copper coin on the floor.....")
        print("Do you want to pick it up?")
        print("Yes/No")
        
        pickup = input().lower()
        if pickup == "yes":
            player.add_to_inventory("copper coin")
            print(f"Inventory: {dict(player.inventory)}")
            print("You pick up the copper coin and walk into a dark Hallway")
            goblin_room(player)  # Call the next room function
            break
        elif pickup == "no":
            print("So you leave the room and walk down the hallway")
            goblin_room(player)  # Call the next room function
            break
        else:
            print("Invalid Input.. Please try again")

def play_game(player):
    display_player_info(player)
    game_over = False
    while player.health > 0 and not game_over:
        if player.current_room == "fight room":
            print("You find yourself in a dark room. You see a door in front of you.")
            action = input("What would you like to do? (enter 'door' to proceed): ")
            if action.lower() == "door":
                player.current_room = "beach"
        
        elif player.current_room == "beach":
            print("You teleport on a sunny beach.")
            npc = NPC("Goblin", 50, 10)
            print("A wild " + npc.name + " appears!")
            while npc.health > 0 and player.health > 0:
                print("\nPlayer Health:", player.health)
                print(npc.name + " Health:", npc.health)
                action = input("What would you like to do? (enter 'attack' to attack, 'run' to run away): ")
                
                if action.lower() == "attack":
                    player.attack_npc(npc)
                    if npc.health > 0:
                        npc_attack = random.randint(1, 10)
                        player.take_damage(npc_attack)
                elif action.lower() == "run":
                    print("You ran away from the " + npc.name + ".")
                    print("GAME_OVER")
                    game_over = True
                    break
                else:
                    print("Invalid action. Try again.")
                
            if player.health <= 0:
                print("You were defeated by the " + npc.name + ". Game Over.")
                game_over = True
                
            elif not game_over:
                print("You defeated the " + npc.name + ". You find a potion and some gold.")
                player.potions += 1
                player.gold += random.randint(1, 10)
                player.current_room = "sewer room"
                return sewer_room(player)

def kitchen_room(player):
    player.current_room = "Kitchen looking area"
    while True:
        display_player_info(player)
        print("You walk into an area that looks like a kitchen.\nLooking around you see BIG Roaches flying around a dim light bulb that's slowly moving back and forth\nTiny mice eating old mouldy bread.\nDo you want to retrieve the old mouldy bread")
        print("yes or no?")
        pickup = input().lower()

        if pickup == "yes":
            player.add_to_inventory("mouldy bread")
            print(f"{player.name} picked up the Mouldy Bread and put it in his pocket")
        elif pickup == "no":
            print(f"{player.name} ignores getting the mouldy bread from the dirty looking mice")
        else:
            print("Invalid Input! Please choose again")
            continue

        print("You exit the Kitchen looking area")
        print("Looking left is a long path of darkness")
        print("Looking right is a dim light shining from a short distance")
        print("*"*10)
        print("Do you choose to go Left or Right")

        direction = input().lower()
        if direction == "right":
            return sewer_room(player)
        elif direction == "left":
            return sewer_room(player)
        else:
            print("Invalid Input! Please choose again")

def hallway_room(player):
    player.current_room = "Darkness of a Hallway"
    while True:
        display_player_info(player)
        print("You start walking down a dimly lit hallway,\nwith only the flickering light from a single torch casting eerie shadows on the moss covered cobblestone walls\nThe air is damp and carries a faint, musty rotten onion odor.")
        print("As you take a cautious step forward\nthe floorboards creak under your weight\nechoing through the darkness silence\nThe hallway stretches ahead\ndisappearing into darkness\nYou can barely make out the outline shadow of something very Colossal running up towards you")
        print("Will you choose to run or stay to fight")
        print("*"*10)
        print("fight or run: ")
        
        direction = input().lower()
        if direction == "run":
            return sewer_room(player)
        elif direction == "fight":
            return fight_room(player)
        else:
            print("Invalid Input! Please choose again")

def sewer_room(player):
    player.current_room = "sewer room"
    while True:
        display_player_info(player)
        print("You travel in a Stink Sewer like area that is putrid with horrific odors,\nYou can go left or right")
        direction = input().lower()
        if direction in ["right", "left"]:
            print("*"*10)
            return na_moo_riddle(player)
        else:
            print("Invalid Input! Please choose again!")

def goblin_room(player):
    player.current_room = "Dark Hallway"
    while True:
        display_player_info(player)
        print("You walk down the hallway and see a Goblin. He asks you for a copper coin to continue. Give it to him? (yes/no)")
        look = input().lower()

        if look == "yes":
            if player.inventory["copper coin"] > 0:
                player.inventory["copper coin"] -= 1
                print(f"You gave Jeriko your copper coin.\nNow you have {dict(player.inventory)} in your bag")
                print("Jeriko being so happy that you gave him copper coins, he snapped his fingers & teleported away")
                return hallway_room(player)
            else:
                print("*"*5)
                print("***You don't have a copper coin to give.***")
                print("*"*5)
        elif look == "no":
            textdisplay3 = "The Goblin named Jeriko lets you pass with a stern warning about the dangers ahead."
            delay_print(textdisplay3)
            print(f"{player.name} walks passed Jeriko.\n[wooooosh] {player.name} falls into a trap door in the floor")
            return next_room(player)
        else:
            print("Invalid input. Please enter 'yes' or 'no'.")

def menu_room(player):
    player.current_room = "menu room"
    while True: 
        display_player_info(player)
        print("**Entering District 1**")
        print("*****@@ Zone 1 @@******")
        print("**Imagination Realm***")
        print("*"*15)
        print("*"*15)
        print("Choose by entering the menu number")
        print("................................ ")
        print("(1)  Start Game: ")
        print(" ...............................")
        print("(2)  Quit: ")
        print("..........................")
        print("Enter Number: ")
        direction = input()
        if direction == "1":
            dungeon(player)  # Call the dungeon function directly
            break  # Exit the menu loop after the game ends
        elif direction == "2":
            game_over(player)
            break
        else:
            print("Invalid Input! Please choose again!")

def game_over(player):
    display_player_info(player)
    print("*"*25)
    print("***GAME OVER!!!***")
    print("*"*25)

    #url = "https://t4.ftcdn.net/jpg/02/11/54/33/360_F_211543376_kv7x0SwdITkWbqajGzglhcvZV25AsPsS.jpg"
    #webbrowser.open(url)

    while True:
        print("Do you want to start over on your adventure?")
        direction = input().lower()
        if direction == "yes":
            return menu_room(player)
        elif direction == "no":
            print("Thanks for playing!")
            return

#changed entire room
def fight_room(player):
    player.current_room = "fight room"
    
    print("You find yourself face-to-face with a Giant Crab.")
    npc = NPC("Giant Crab", 50, 15)
    
    result = enhanced_combat(player, npc)
    
    if result == "victory":
        gold_reward = random.randint(10, 50) #random gold reward added
        player.add_gold(gold_reward)
        player.potions += 1
        print(f"You defeated the {npc.name} and found {gold_reward} gold and +1 Potion!")
        return kitchen_room(player)
    elif result == "defeat":
        return game_over(player)
    else:  # fled
        return sewer_room(player)

def construction_room(player):
    player.current_room = "Construction Room"
    display_player_info(player)

    while True:
        print("THIS ROOM IS UNDER CONSTRUCTION")
        next_action = input("What do you want to do next? (explore/exit): ").lower()
        if next_action == "explore":
            return mystery_forest(player)
        elif next_action == "exit":
            print("Exiting the construction room...")
            return end_game(player)
        else:
            print("Invalid choice. Please try again.")

def next_room(player): #path added to merchant room
    display_player_info(player)
    player.current_room = "next room"
    print("You see two paths ahead:")
    print("1. Enter the mysterious shop")
    print("2. Continue to the next area")
    
    choice = input("Enter your choice (1-2): ")
    
    if choice == "1":
        return merchant_room(player)
    elif choice == "2":
        return construction_room(player)
    else:
        print("Invalid choice. Try again.")

def mystery_forest(player):
    #make troll ask for mouldy bread for a ancient secret recipe, if player not have it then have troll jus give player a seed to grow if player can find a pot to grow in
    display_player_info(player)
    player.current_room = "mystery forest"
    print("As the player steps into an unknown Mythical Gigantic forest,\nthe air thickens with an ancient magic,\nand the trees whisper secrets of forgotten times. Glowing fungi illuminate the path,\ncasting eerie shadows that dance with the passing of on and off sunlight light. Suddenly,\na soft, melodic hum fills the air, hinting at the presence of an unseen Dwarf Troll watching over the enchanted realm.")
    print("Who are you!?\nWhere did you come from!?\nHOW DID YOU EVEN FIND THIS PLACE!?\nSorry for the many rude questions")
    print(f"{player.name} stares at A mini dwarf troll, no bigger than 2 feet, wielding a small wooden stick crafted from the ancient Tree of Life's root. He sports a long, flowing beard covered with pillbugs and earthworms, a whimsical mushroom hat that looks dried up and older than Thornbark himself, and carries a mysterious hide backpack adorned with mythical forest trinkets. His presence gives an aura of ancient magic and woodland mythical forest mystery.")
    print("My name is THRONBARK of the Lahbahn Race that resides in this Ancient Forest of Eldergrove")
    player.current_room = "Elder Grove Mythical Forest"
    
    while True:
        display_player_info(player)
        print("Do you have anything to offer Thornbark? yes/no")
        look = input().lower()

        if look == "yes":
            if player.inventory["mouldy bread"] > 0:
                player.inventory["mouldy bread"] -= 1
                print(f"You dig into your bag and find {dict(player.inventory)}. You hand over to Thornbark your Mouldy Bread.\nNow you have {dict(player.inventory)} in your bag")
                print("Thornbark stares at you with amazement, being very pleased and happy hands you a very odd and ancient flute, intricately carved from the wood of the Tree of Life. The flute is adorned with delicate, glowing runes that pulse with a soft, ethereal light. Its surface is smooth, yet it carries the weight of countless ages, aura of the very soul of the forest lightly pulsates off of it.")
                print("This very flute will bring you many many mysterious ventures to come if you learn to master its melody! Please do not ever give this away for it holds the power of untold Universal Power")
                player.add_to_inventory("Elder's Whispers Flute")
                return next_room(player)
            else:
                print("*"*5)
                print("***You don't have a mouldy bread to give.***")
                print("*"*5)
        elif look == "no":
            textdisplay3 = "Thornbark sighs.. He pulls out of his mysterious hide back pack a a very odd and ancient flute, intricately carved from the wood of the Tree of Life. The flute is adorned with delicate, glowing runes that pulse with a soft, ethereal light. Its surface is smooth, yet it carries the weight of countless ages, aura of the very soul of the forest lightly pulsates off of it."
            delay_print(textdisplay3)
            print(f"Thornbark then plays a very soothing melody from it as {player.name} slowly feels weird and nauseous\n{player.name} blacks out")
            return next_room(player)
        else:
            print("Invalid input. Please enter 'yes' or 'no'.")

def void_room(player):
    display_player_info(player)
    player.current_room = "void room"
    print("in void room")
    return game_over(player)

def na_moo_riddle(player):
    display_player_info(player)
    player.current_room = "moo room"
    secret_number = random.randint(1, 10)
    attempts = 0
    loser = 2

    print("You descended into the murky depths of the sewer, the air thick with decay. Walls dripped slime,\nand flickering torches barely illuminated winding tunnels.\nYou see doo-doo and vomit looking material floating in a slow pace current into the abyss.")
    print("As you go to step away from the foul-smelling water,\na giant rat the size of a house cat runs past you!\nYou accidentally fall into the septic sewer water")
    print("You quickly jump out of the water disgusted and start puking, but suddenly stop\nOut of the murky depths of the fetid swamp of sewer water,\nan ancient toad the size of a boulder squats,\nits warty skin oozing with a putrid slime. Its bulging eyes, yellowed and grimy,\nfixate on you as it croaks in a guttural voice,")
    print("Aloha e ka hoa!\n'O ko'u inoa 'o NA MO'O.\nHe aha kāu hana ma kēia kai i lalo nei i nā wai kūkulu kūkulu?")
    print("Pono 'oe e koho i nā helu ma waena o ho'okahi a me 'umi:")
    print("Do you understand this Creature: Ae/Aole\n")
    
    understand = input().lower()

    if understand == "ae":
        pass
    elif understand == "aole":
        print("Heluhelu hou")
        return na_moo_riddle(player)
    else:
        print("NA MO'O doesn't understand you, say it again")
        return na_moo_riddle(player)

    while True:
        guess = input("E komo i kāu pane: ")

        try:
            guess = int(guess)
        except ValueError:
            print("NA MO'O doesn't understand you, say it again.")
            continue

        attempts += 1

        if guess < secret_number:
            print("E hele i luna.")
        elif guess > secret_number:
            print("E hele i lalo.")
        else:
            print(f"Aloha! Ua mahalo au i kou hoomaopopo ana i ka kakou olelo kahiko.")
            print(f"E 'ae mai ko mākou hui malu iā 'oe a e hele i laila i kēlā me kēia manawa āu e makemake\nai iā mākou e ho'ohana wale i kēia pūpū e puhi ai e kāhea iā mākou.\n{{OB TITLE}}{{OB ARTIFACT}}")
            print("Na Mo'o teleports you into the abyssal void")
            return void_room(player)

        if attempts >= loser:
            print("'A'ole maopopo iā 'oe ke 'ano a me ka 'ōlelo o ko kākou mo'omeheu kahiko!")
            print("MAI OLA!")
            print("Na Moo teleports you into mystery forest")
            return mystery_forest(player)
#added room
def merchant_room(player):
    player.current_room = "Merchant's Shop"
    merchant = Merchant()

    while True:
        display_player_info(player)
        print("\nYou enter a dimly lit shop. A mysterious merchant greets you.")
        print(f"Your gold: {player.gold}")
        merchant.display_inventory()
        
        print("\nWhat would you like to do?")
        print("1. Buy an item")
        print("2. Leave the shop")
        
        choice = input("Enter your choice (1-2): ")
        
        if choice == "1":
            item = input("Enter the name of the item you want to buy: ")
            merchant.sell_item(player, item)
        elif choice == "2":
            print("You leave the merchant's shop.")
            return next_room(player)  # or whatever room you want the player to go to next
        else:
            print("Invalid choice. Try again.")
#added pet room
def pet_encounter_room(player):
    player.current_room = "Mysterious Garden"
    pet = Pet("Luna", "Mystical Fox")
    
    print("\nYou enter a beautiful, mystical garden.")
    print(f"A {pet.species} approaches you cautiously.")
    
    while True:
        print(f"\nThe {pet.species} looks at you curiously.")
        print("What would you like to do?")
        print("1. Try to feed the creature")
        print("2. Attempt to play with it")
        print("3. Observe its status")
        print("4. Try to adopt it")
        print("5. Leave the garden")
        
        choice = input("Enter your choice (1-5): ")
        
        if choice == "1":
            pet.feed()
        elif choice == "2":
            pet.play()
        elif choice == "3":
            pet.status()
        elif choice == "4":
            if pet.loyalty >= 50:
                player.adopt_pet(pet)
                print(f"{pet.name} has decided to join you on your adventure!")
                return next_room(player)
            else:
                print(f"The {pet.species} doesn't seem to trust you enough yet.")
        elif choice == "5":
            print("You decide to leave the garden.")
            return next_room(player)
        else:
            print("Invalid choice. Please try again.")
        
        # Check if the pet wants to join on its own
        if pet.loyalty >= 75 and player.pet is None:
            print(f"\nThe {pet.species} has grown very fond of you!")
            player.adopt_pet(pet)
            print(f"{pet.name} has decided to join you on your adventure!")
            return next_room(player)

def end_game(player):
    display_player_info(player)
    player.current_room = "end game"
    print("Thank you for playing!")

def main():
    print("Welcome to Imagination Land")
    name = input("Enter your character's name: ")
    player = Player(name)
    print(f"Aloha, {player.name}!")
    menu_room(player)

if __name__ == "__main__":
    main()
